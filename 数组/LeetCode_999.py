#!/usr/bin/python
# -*- coding: UTF-8 -*-

# 999. 车的可用捕获量  难度：简单
# 在一个 8 x 8 的棋盘上，有一个白色车（rook）。也可能有空方块，白色的象（bishop）和黑色的卒（pawn）。它们分别以字符 “R”，“.”，“B” 和 “p” 给出。大写字符表示白棋，小写字符表示黑棋。

# 车按国际象棋中的规则移动：它选择四个基本方向中的一个（北，东，西和南），然后朝那个方向移动，直到它选择停止、到达棋盘的边缘或移动到同一方格来捕获该方格上颜色相反的卒。另外，车不能与其他友方（白色）象进入同一个方格。

# 返回车能够在一次移动中捕获到的卒的数量。
 

# 示例 1：



# 输入：[[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","R",".",".",".","p"],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]]
# 输出：3
# 解释：
# 在本例中，车能够捕获所有的卒。
# 示例 2：



# 输入：[[".",".",".",".",".",".",".","."],[".","p","p","p","p","p",".","."],[".","p","p","B","p","p",".","."],[".","p","B","R","B","p",".","."],[".","p","p","B","p","p",".","."],[".","p","p","p","p","p",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]]
# 输出：0
# 解释：
# 象阻止了车捕获任何卒。
# 示例 3：



# 输入：[[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","p",".",".",".","."],["p","p",".","R",".","p","B","."],[".",".",".",".",".",".",".","."],[".",".",".","B",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."]]
# 输出：3
# 解释： 
# 车可以捕获位置 b5，d6 和 f5 的卒。

class Solution(object):
    def numRookCaptures(self, board):
        """
        :type board: List[List[str]]
        :rtype: int
        """
        n,ans = len(board),0
        for i in range(n):
            for j in range(n):
                if board[i][j] == "R":
                    temp_i,temp_j = i,j
                    while j<n: #向右走
                        if board[i][j] == "p":
                            ans +=1
                            break
                        if board[i][j] == "B":
                            break
                        j += 1
                    i,j = temp_i,temp_j
                    while j>0: #向左走
                        if board[i][j] == "p":
                            ans +=1
                            break
                        if board[i][j] == "B":
                            break
                        j -= 1
                    i,j = temp_i,temp_j
                    while i>0: #向上走
                        if board[i][j] == "p":
                            ans +=1
                            break
                        if board[i][j] == "B":
                            break
                        i -= 1
                    i,j = temp_i,temp_j
                    while i<n: #向下走
                        if board[i][j] == "p":
                            ans +=1
                            break
                        if board[i][j] == "B":
                            break
                        i += 1
                    break
        return ans